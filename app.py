from flask import Flask, request, jsonify, send_from_directory, render_template
from flask_cors import CORS
import replicate
import os
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import base64

app = Flask(__name__)
CORS(app)  # Activer CORS pour toutes les routes

# Remplacez par votre jeton d'API Replicate
os.environ["REPLICATE_API_TOKEN"] = "r8_YuR3rKZrkqQCeb51S1qSnFEOrsA6TCe3Bch5m"

@app.route('/generate_image', methods=['POST'])
def generate_image():
    data = request.get_json()
    prompt = data.get('prompt')
    text = data.get('text', 'Generated by Replicate')
    color = data.get('color', '#FFFFFF')

    input = {
        "width": 768,
        "height": 768,
        "prompt": prompt,
        "refine": "expert_ensemble_refiner",
        "apply_watermark": False,
        "num_inference_steps": 25
    }

    output = replicate.run(
        "stability-ai/sdxl:7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc",
        input=input
    )

    image_url = output[0]
    
    # Télécharger l'image générée
    response = requests.get(image_url)
    image = Image.open(BytesIO(response.content))

    # Ajouter du texte stylisé sur l'image
    draw = ImageDraw.Draw(image)
    
    # Chemin relatif vers votre fichier de police
    font_path = os.path.join(os.path.dirname(__file__), "Lobster Regular 400.ttf")
    font_size = 40
    try:
        font = ImageFont.truetype(font_path, font_size)
    except OSError:
        return jsonify({"error": "Cannot open font resource"}), 500
    
    # Calculer la taille du texte et positionner au centre
    bbox = draw.textbbox((0, 0), text, font=font)
    textwidth = bbox[2] - bbox[0]
    textheight = bbox[3] - bbox[1]
    width, height = image.size
    x = (width - textwidth) / 2
    y = (height - textheight) / 2
    
    # Dessiner le texte avec une bordure noire pour une meilleure lisibilité
    draw.text((x-1, y-1), text, font=font, fill="black")
    draw.text((x+1, y-1), text, font=font, fill="black")
    draw.text((x-1, y+1), text, font=font, fill="black")
    draw.text((x+1, y+1), text, font=font, fill="black")
    draw.text((x, y), text, font=font, fill=color)

    # Sauvegarder l'image avec le texte dans un buffer
    buffer = BytesIO()
    image.save(buffer, format="PNG")
    buffer.seek(0)

    # Retourner l'image modifiée sous forme de base64
    modified_image_url = "data:image/png;base64," + base64.b64encode(buffer.getvalue()).decode('utf-8')

    return jsonify({"image_url": modified_image_url})

@app.route('/')
def serve_index():
    return send_from_directory('.', 'index.html')

@app.route('/chat')
def serve_chat():
    return render_template('chat.html')

if __name__ == '__main__':
    app.run(debug=True)
